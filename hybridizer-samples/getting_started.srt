1
00:00:05,000 --> 00:00:10,000
First, install the Visual Studio Extension

2
00:00:14,000 --> 00:00:20,000
Open Visual Studio

3
00:00:25,000 --> 00:00:37,000
Create a C# project

4
00:00:38,000 --> 00:00:40,000
Query a valid License though Tools -> Hybridizer Configuration

5
00:00:40,000 --> 00:00:49,000
Enter your email and click "Query License"

6
00:00:50,000 --> 00:00:59,000
Check your mailbox and copy the license text to your clipboard (Ctrl-C)

7
00:01:00,000 --> 00:01:06,000
Paste the license key in the appropriate text box and click Validate

8
00:01:08,000 --> 00:01:13,000
Make sure your project builds in 64 bits (x64 configuration)

9
00:01:20,000 --> 00:01:30,000
Implement some parallel code (Parallel.For or cuda-like loop)
And decorate the kernels with EntryPointAttribute

10
00:01:32,000 --> 00:01:40,000
Right Click on your project -> Hybridize Project -> Generate

11
00:01:40,000 --> 00:01:45,000
Add the appropriate using statements (Ctrl-;)

12
00:01:48,000 --> 00:01:52,000
Build the .Net project in x64 

13
00:01:53,000 --> 00:02:01,000
Then the generated native project

14
00:02:05,000 --> 00:02:13,000
You can now invoke the generated CUDA code using HybRunner

15
00:02:14,000 --> 00:02:24,000
Executing the project logs that the native library has been mapped 
and that the generated code has been properly invoked

16
00:02:26,000 --> 00:02:30,000
Let's profile using Nsight

17
00:02:32,000 --> 00:02:36,000
You can spot Nsight profiling the kernel you wrote in C#

18
00:02:40,000 --> 00:03:00,000
Inspection of kernel launch gives you all the expected details.










